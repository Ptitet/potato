#! /bin/bash

function print_help () {
	echo "Potato laptop booster"
	echo "Commands:"
	echo "	add-ram	<size>			Increase the amount of ram by <size> Gb"
	echo "	enable-shell-rtx		Enable ray-traced shell"
	echo "	increase-resolution		Change screen resolution to 4K"
	echo "	add-cores				Increase CPU core count"
	echo "	add-cpu	<count>			Add <count> CPUs to the system"
	echo "	add-gpu					Add a GPU to the system"
	echo "	increase-disk <size>	Increase disk space by <size> Tb"
	echo "	optimize				Run various optimizations"
}

function char_n () {
	for i in $(seq 1 $1); do
		echo -n "$2"
	done
}

function loading () {
	echo -n $(char_n $1 "▯")
	for i in $(seq 1 $1); do
		sleep 0.5
		echo -ne "\r"
		echo -n $(char_n $i "▮")
		echo -n $(char_n $(($1 - $i)) "▯")
	done
	echo
}

function add_ram () {
		echo "Choosing best RAM file format..."
		sleep 1
		echo "Defaulting to .mp4 (most popular)"
		sleep 0.5
		echo "Retrieving RAM providers list..."
		sleep 1
		echo "Choosing best provider..."
		sleep 0.5
		echo "Defaulting to https://freeram.ru"
		sleep 0.2
		echo "Downloading RAM.mp4..."
		loading 10
		echo "Extracting..."
		sleep 1
		echo "Setting up RAM..."
		sleep 1
		echo "Creating /dev/ram0..."
		sleep 0.5
		echo "Linking properties..."
		sleep 1
		echo "Registering new kernel modules..."
		sleep 2
		echo "Cleaning up..."
		sleep 0.5
		echo -e "\nRAM successfully added !"
		echo "+$1Gb of RAM"
}

function enable_shell_rtx () {
		echo "Enabling ray-traced shell..."
		sleep 1
		echo "Downloading RTX drivers..."
		loading 10
		echo "Extracting files..."
		sleep 3
		echo "Checking compatibility..."
		sleep 1
		echo "Computing checksum..."
		sleep 2
		echo "Checksum is valid"
		sleep 0.2
		echo "Running pre-install scripts..."
		sleep 2
		echo "Installing..."
		sleep 3
		echo "Compiling dependencies..."
		sleep 2
		echo "Linking files..."
		sleep 0.5
		echo "Running post-install scripts..."
		sleep 2
		echo "Running post-post-install scripts..."
		sleep 1
		echo "Configuring external metadata..."
		sleep 0.5
		echo "Enabling..."
		sleep 1
		echo -e "\nRTX shell successfully enabled !"
		echo "Note: this feature requires a dedicated GPU"
		echo "Note: you can install one by running 'potato add-gpu'"
}

function increase_resolution () {
	echo "Checking screen compatibility..."
	sleep 1
	echo "Selecting screen reference..."
	sleep 0.5
	echo "Calculating rasterization matrix..."
	sleep 0.2
	echo "Downloading pixels from https://amaz0n.com..."
	loading 10
	echo "Resizing screen..."
	sleep 1
	echo "Setting up new resolution..."
	sleep 0.5
	echo "Adding colors..."
	sleep 0.5
	echo "Calibrating..."
	sleep 2
	echo "Removing useless pixels..."
	sleep 1
	echo "Clearing standard output..."
	sleep 0.5
	echo "Deleting old resolution..."
	sleep 1
	echo -e "\nResolution successfully increased !"
	echo "Note: this feature requires a lot of RAM"
	echo "Note: you can install more by running 'potato add-ram <size>'"
}

function add_cores () {
	num_cores=$(nproc --all)
	echo "Retrieving CPU infos..."
	sleep 1
	echo "CPU core count: $num_cores"
	echo "Target core count: $((num_cores * 2))"
	sleep 1
	echo "Searching for new cores..."
	sleep 0.5
	echo "Searching in /lost+found..."
	sleep 0.5
	echo "Searching in /dev/null..."
	sleep 0.5
	echo "No new cores found"
	sleep 1
	echo "Defaulting to core download"
	sleep 0.5
	echo "Downloading cores from https://corehub.com..."
	loading 10
	echo "Unpacking core archive..."
	sleep 2
	echo "Setting up virtual machine..."
	sleep 1
	echo "Installing cores..."
	sleep 2
	echo "Converting virtual machine to real machine..."
	sleep 1
	echo "Setting up space on motherboard..."
	sleep 0.5
	echo "Removed unused PCIe interfaces"
	sleep 0.2
	echo "Connecting wires..."
	sleep 1
	echo "Modifying BIOS configuration..."
	sleep 3
	echo "Initializing L1 cache..."
	sleep 0.5
	echo -e "\nCores successfully added !"
	echo "+$((num_cores)) cores"
}

if [ $# -eq 0 ]; then
	print_help
	exit
fi

case $1 in
	"add-ram")
		if [ $# -ne 2 ]; then
			print_help
			exit
		fi
		add_ram $2
		;;
	"enable-shell-rtx")
		enable_shell_rtx
		;;
	"increase-resolution")
		increase_resolution
		;;
	"add-cores")
		add_cores
		;;
esac
